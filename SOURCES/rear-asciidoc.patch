diff --git a/doc/user-guide/12-BLOCKCLONE.adoc b/doc/user-guide/12-BLOCKCLONE.adoc
index 061f0f49..2d4e0ed1 100644
--- a/doc/user-guide/12-BLOCKCLONE.adoc
+++ b/doc/user-guide/12-BLOCKCLONE.adoc
@@ -40,17 +40,17 @@ First we need to set some global options in _local.conf_,
 In our small example backups will be stored in _/mnt/rear_ directory
  on BACKUP_URL NFS server.
 
-```
+--------------------------
 # cat local.conf
 OUTPUT=ISO
 BACKUP=NETFS
 BACKUP_OPTIONS="nfsvers=3,nolock"
 BACKUP_URL=nfs://<hostname>/mnt/rear
-```
+--------------------------
 
 Now we will define variables that will apply only for targeted block device
 
-```
+--------------------------
 # cat alien.conf
 BACKUP=BLOCKCLONE                                        # Define BLOCKCLONE as backup method
 BACKUP_PROG_ARCHIVE="alien"                              # Name of image file
@@ -66,16 +66,16 @@ BLOCKCLONE_MBR_FILE="alien_boot_strap.img"               # Output filename for b
 BLOCKCLONE_PARTITIONS_CONF_FILE="alien_partitions.conf"  # Output filename for partition configuration
 
 BLOCKCLONE_ALLOW_MOUNTED="yes"                           # Device can be mounted during backup (default NO)
-```
+--------------------------
 
 ==== Running backup
 Save partitions configuration, bootstrap code and create actual backup of /dev/sdc1
-```
+--------------------------
 # rear -C alien mkbackuponly
-```
+--------------------------
 
 ==== Running restore from ReaR restore/recovery system
-```
+--------------------------
 # rear -C alien restoreonly
 Restore alien.dd.img to device: [/dev/sdc1]                 # User is always prompted for restore destination
 Device /dev/sdc1 was not found.                             # If destination does not exist ReaR will try to create it (or fail if BLOCKCLONE_SAVE_MBR_DEV was not set during backup)
@@ -102,7 +102,7 @@ Device     Boot Start    End Sectors  Size Id Type
 The partition table has been altered.
 Calling ioctl() to re-read partition table.
 Syncing disks.
-```
+--------------------------
 
 ==== Summary
 In first example we have run backup of /dev/sdc1 partition and stored it on NFS
@@ -127,37 +127,37 @@ In next example we will do backup/restore using BLOCKCLONE and `ntfsclone`
  of Linux (installed on /dev/sda) and Windows 10 (installed on /dev/sdb).
 
 TIP: You can locate right disk devices using `df` and `os-prober`
-```
+--------------------------
 # df -h /boot
 Filesystem      Size  Used Avail Use% Mounted on
 /dev/sda1        10G  4.9G  5.2G  49% /           # Linux is most probably installed on /dev/sda
 
 # os-prober
 /dev/sdb1:Windows 10 (loader):Windows:chain       # Windows 10 is most probably installed on /dev/sdb
-```
+--------------------------
 
 First we will configure some ReaR backup global options
  (similar to link:12-BLOCKCLONE.adoc#1-backuprestore-of-arbitrary-block-device-with-blockclone-and-dd-on-nfs-server[first example]
  we will do backup/restore with help of NFS server).
 
-```
+--------------------------
 # cat local.conf
 OUTPUT=ISO
 BACKUP=NETFS
 BACKUP_OPTIONS="nfsvers=3,nolock"
 BACKUP_URL=nfs://<hostname>/mnt/rear
 REQUIRED_PROGS+=( ntfsclone )
-```
+--------------------------
 
 Now we will define backup parameters for Linux.
 
-```
+--------------------------
 # cat base_os.conf
 this_file_name=$( basename ${BASH_SOURCE[0]} )
 LOGFILE="$LOG_DIR/rear-$HOSTNAME-$WORKFLOW-${this_file_name%.*}.log"
 BACKUP_PROG_ARCHIVE="backup-${this_file_name%.*}"
 BACKUP_PROG_EXCLUDE+=( '/media/*' )
-```
+--------------------------
 
 Our Windows 10 is by default installed on two separate partitions
  (partition 1 for boot data and partition 2 for disk C:),
@@ -165,7 +165,7 @@ Our Windows 10 is by default installed on two separate partitions
 
 Windows boot partition:
 
-```
+--------------------------
 # cat windows_boot.conf
 BACKUP=BLOCKCLONE
 BACKUP_PROG_ARCHIVE="windows_boot"
@@ -179,10 +179,10 @@ BLOCKCLONE_PROG_OPTS="--quiet"
 BLOCKCLONE_SAVE_MBR_DEV="/dev/sdb"
 BLOCKCLONE_MBR_FILE="windows_boot_strap.img"
 BLOCKCLONE_PARTITIONS_CONF_FILE="windows_partitions.conf"
-```
+--------------------------
 
 Windows data partition (disk C:\):
-```
+--------------------------
 # cat windows_data.conf
 BACKUP=BLOCKCLONE
 BACKUP_PROG_ARCHIVE="windows_data"
@@ -196,35 +196,35 @@ BLOCKCLONE_PROG_OPTS="--quiet"
 BLOCKCLONE_SAVE_MBR_DEV="/dev/sdb"
 BLOCKCLONE_MBR_FILE="windows_boot_strap.img"
 BLOCKCLONE_PARTITIONS_CONF_FILE="windows_partitions.conf"
-```
+--------------------------
 
 ==== Running backup
 First we will create backup of Linux. `mkbackup` command will create bootable
  ISO image with ReaR rescue/recovery system that will be later used for
  booting broken system and consecutive recovery.
-```
+--------------------------
 # rear -C base_os mkbackup
-```
+--------------------------
 
 Now we create backup of Windows 10 boot partition. Command `mkbackuponly`
  will ensure that only partition data and partition layout will be saved
  (ReaR rescue/recovery system will not be created which is exactly what we want).
-```
+--------------------------
 # rear -C windows_boot mkbackuponly
-```
+--------------------------
 
 Similarly, we create backup of Windows 10 data partition (disk C:\)
-```
+--------------------------
 # rear -C windows_data mkbackuponly
-```
+--------------------------
 
 ==== Running restore from ReaR restore/recovery system
 As a first step after ReaR rescue/recovery system booted,
 we will recover Linux. This step will recover all Linux file systems,
 OS data and bootloader. Windows disk will remain untouched.
-```
+--------------------------
 # rear -C base_os recover
-```
+--------------------------
 
 In second step will recover Windows 10 boot partition. During this step ReaR
  will detect that destination partition is not present and ask us for device
@@ -234,25 +234,25 @@ In second step will recover Windows 10 boot partition. During this step ReaR
  partition(s) configuration (currently mounted under _/mnt/local_) will
  remain untouched. Before starting Windows 10 recovery we should identify
  right disk for recovery, as mentioned earlier disk size could be a good start.
-```
+--------------------------
 # fdisk -l /dev/sdb
 Disk /dev/sdb: 50 GiB, 53687091200 bytes, 104857600 sectors
-```
+--------------------------
 
 _/dev/sdb_ looks to be right destination, so we can proceed with restore.
-```
+--------------------------
 # rear -C windows_boot restoreonly
 Restore windows_boot.img to device: [/dev/sdb1]
 Device /dev/sdb1 was not found.
 Restore partition layout to (^c to abort): [/dev/sdb]
 Checking that no-one is using this disk right now ... OK
 ...
-```
+--------------------------
 
 Last step is to recover Windows 10 OS data (C:\).
 Partitions on _/dev/sdb_ were already created in previous step,
 hence ReaR will skip prompt for restoring partition layout.
-```
+--------------------------
 # rear -C windows_data restoreonly
 Restore windows_data.img to device: [/dev/sdb2]
 Ntfsclone image version: 10.1
@@ -263,7 +263,7 @@ Space in use           : 9396 MB (27.8%)
 Offset to image data   : 56 (0x38) bytes
 Restoring NTFS from image ...
 ...
-```
+--------------------------
 
 At this stage Linux together with Windows 10 is successfully restored.
 
@@ -286,7 +286,7 @@ In this example we will do backup/restore using BLOCKCLONE and `ntfsclone`
  Backups will be stored on NFS server.
 
 First we set global ReaR options
-```
+--------------------------
 # cat local.conf
 OUTPUT=ISO
 BACKUP=NETFS
@@ -300,23 +300,23 @@ BLOCKCLONE_SAVE_MBR_DEV="/dev/sda"
 BLOCKCLONE_MBR_FILE="boot_strap.img"
 BLOCKCLONE_PARTITIONS_CONF_FILE="partitions.conf"
 
-```
+--------------------------
 
 IMPORTANT: BLOCKCLONE_STRICT_PARTITIONING is mandatory if backing up
  Linux / Windows that shares one disk. Not using this option might result to
  unbootable Windows 10 installation.
 
 Linux configuration
-```
+--------------------------
 # cat base_os.conf
 this_file_name=$( basename ${BASH_SOURCE[0]} )
 LOGFILE="$LOG_DIR/rear-$HOSTNAME-$WORKFLOW-${this_file_name%.*}.log"
 BACKUP_PROG_ARCHIVE="backup-${this_file_name%.*}"
 BACKUP_PROG_EXCLUDE+=( '/media/*' )
-```
+--------------------------
 
 Windows 10 boot partition configuration
-```
+--------------------------
 # cat windows_boot.conf
 BACKUP=BLOCKCLONE
 
@@ -328,10 +328,10 @@ BLOCKCLONE_PROG=ntfsclone
 BLOCKCLONE_PROG_OPTS="--quiet"
 
 BLOCKCLONE_SOURCE_DEV="/dev/sda1"
-```
+--------------------------
 
 Windows 10 data partition configuration
-```
+--------------------------
 # cat windows_data.conf
 BACKUP=BLOCKCLONE
 BACKUP_PROG_ARCHIVE="windows_data"
@@ -342,42 +342,42 @@ BLOCKCLONE_PROG=ntfsclone
 BLOCKCLONE_PROG_OPTS="--quiet"
 
 BLOCKCLONE_SOURCE_DEV="/dev/sda2"
-```
+--------------------------
 
 ==== Running backup
 
 Backup of Linux
-```
+--------------------------
 # rear -C base_os mkbackup
-```
+--------------------------
 
 Backup of Windows 10 boot partition
-```
+--------------------------
 # rear -C windows_boot mkbackuponly
-```
+--------------------------
 
 Backup of Windows 10 data partition
-```
+--------------------------
 # rear -C windows_data mkbackuponly
-```
+--------------------------
 
 ==== Running restore from ReaR restore/recovery system
 Restore Linux
-```
+--------------------------
 # rear -C base_os recover
-```
+--------------------------
 
 During this step ReaR will also create both Windows 10 partitions
 
 Restore Windows 10 data partition
-```
+--------------------------
 # rear -C windows_data restoreonly
-```
+--------------------------
 
 Restore Windows 10 boot partition
-```
+--------------------------
 # rear -C windows_boot restoreonly
-```
+--------------------------
 
 === 4. Backup/restore of Linux / Windows 10 dual boot setup sharing same disk with USB as destination
 
@@ -389,7 +389,7 @@ In this example we will do backup/restore using BLOCKCLONE and `ntfsclone`
  Backups will be stored on USB disk drive (_/dev/sdb_ in this example).
 
 Global options
-```
+--------------------------
 # cat local.conf
 OUTPUT=USB
 BACKUP=NETFS
@@ -407,10 +407,10 @@ BLOCKCLONE_SAVE_MBR_DEV="/dev/sda"
 
 BLOCKCLONE_MBR_FILE="boot_strap.img"
 BLOCKCLONE_PARTITIONS_CONF_FILE="partitions.conf"
-```
+--------------------------
 
 Options used during Linux backup/restore.
-```
+--------------------------
 # cat local.conf
 OUTPUT=USB
 BACKUP=NETFS
@@ -428,14 +428,14 @@ BLOCKCLONE_SAVE_MBR_DEV="/dev/sda"
 
 BLOCKCLONE_MBR_FILE="boot_strap.img"
 BLOCKCLONE_PARTITIONS_CONF_FILE="partitions.conf"
-```
+--------------------------
 
 IMPORTANT: USB_SUFFIX option is mandatory as it avoids ReaR to hold every
  backup in separate directory, this behavior is essential for BLOCKCLONE
  backup method to work correctly.
 
 Windows boot partition options
-```
+--------------------------
 # cat windows_boot.conf
 BACKUP=BLOCKCLONE
 
@@ -447,10 +447,10 @@ BLOCKCLONE_PROG=ntfsclone
 BLOCKCLONE_PROG_OPTS="--quiet"
 
 BLOCKCLONE_SOURCE_DEV="/dev/sda1"
-```
+--------------------------
 
 Windows data partition options
-```
+--------------------------
 # cat windows_data.conf
 BACKUP=BLOCKCLONE
 BACKUP_PROG_ARCHIVE="windows_data"
@@ -461,11 +461,11 @@ BLOCKCLONE_PROG=ntfsclone
 BLOCKCLONE_PROG_OPTS="--quiet"
 
 BLOCKCLONE_SOURCE_DEV="/dev/sda2"
-```
+--------------------------
 
 ==== Running backup
 First we need to format target USB device, with `rear format` command
-```
+--------------------------
 # rear -v format /dev/sdb
 Relax-and-Recover 2.00 / Git
 Using log file: /var/log/rear/rear-centosd.log
@@ -477,15 +477,15 @@ Creating ReaR data partition up to 100% of '/dev/sdb'
 Setting 'boot' flag on /dev/sdb
 Creating ext3 filesystem with label 'REAR-000' on '/dev/sdb1'
 Adjusting filesystem parameters on '/dev/sdb1'
-```
+--------------------------
 
 Backup of Linux
-```
+--------------------------
 # rear -C base_os mkbackup
-```
+--------------------------
 
 Backup of Windows 10 boot partition
-```
+--------------------------
 # rear -C windows_boot mkbackuponly
 NTFS volume version: 3.1
 Cluster size       : 4096 bytes
@@ -496,10 +496,10 @@ Accounting clusters ...
 Space in use       : 338 MB (64.4%)
 Saving NTFS to image ...
 Syncing ...
-```
+--------------------------
 
 Backup of Windows 10 data partition
-```
+--------------------------
 # rear -C windows_data mkbackuponly
 NTFS volume version: 3.1
 Cluster size       : 4096 bytes
@@ -510,7 +510,7 @@ Accounting clusters ...
 Space in use       : 9833 MB (54.3%)
 Saving NTFS to image ...
 Syncing ...
-```
+--------------------------
 
 ==== Running restore from ReaR restore/recovery system
 For sake of this demonstration I've purposely used ReaR's rescue/recovery media
@@ -519,7 +519,7 @@ For sake of this demonstration I've purposely used ReaR's rescue/recovery media
  demonstrate possibility of ReaR to recover backup to arbitrary disk. +
 As first step Linux will be restored, this will create all the partitions
  needed, even those used by Windows 10.
-```
+--------------------------
 RESCUE centosd:~ # rear -C base_os recover
 Relax-and-Recover 2.00 / Git
 Using log file: /var/log/rear/rear-centosd.log
@@ -541,13 +541,13 @@ Original disk /dev/sda does not exist in the target system. Please choose an app
 2) /dev/sdb
 3) Do not map disk.
 #?
-```
+--------------------------
 
 Now ReaR recover command stops as it detected that disk layout is not identical.
  As our desired restore target is _/dev/sdb_ we choose right disk and continue
  recovery. ReaR will ask to check created restore scripts, but this is not
  needed in our scenario.
-```
+--------------------------
 #? 2
 2017-01-25 20:54:01 Disk /dev/sdb chosen as replacement for /dev/sda.
 Disk /dev/sdb chosen as replacement for /dev/sda.
@@ -607,11 +607,11 @@ Skip installing GRUB Legacy boot loader because GRUB 2 is installed (grub-probe
 Installing GRUB2 boot loader
 Finished recovering your system. You can explore it under '/mnt/local'.
 Saving /var/log/rear/rear-centosd.log as /var/log/rear/rear-centosd-recover-base_os.log
-```
+--------------------------
 
 Now we have Linux part restored, GRUB installed and partitions created, hence
  we can continue with Windows 10 boot partition recovery.
-```
+--------------------------
 RESCUE centosd:~ # rear -C windows_boot restoreonly
 Restore windows_boot.nc.img to device: [/dev/sda1] /dev/sdb1
 Ntfsclone image version: 10.1
@@ -622,12 +622,12 @@ Space in use           : 338 MB (64.4%)
 Offset to image data   : 56 (0x38) bytes
 Restoring NTFS from image ...
 Syncing ...
-```
+--------------------------
 
 Similarly to Linux restore, we were prompted for restore destination, which
  is /dev/sdb1 in our case. +
 As the last step we will recover Windows 10 data partition
-```
+--------------------------
 RESCUE centosd:~ # rear -C windows_data restoreonly
 Restore windows_data.nc.img to device: [/dev/sda2] /dev/sdb2
 Ntfsclone image version: 10.1
@@ -638,7 +638,7 @@ Space in use           : 9867 MB (54.5%)
 Offset to image data   : 56 (0x38) bytes
 Restoring NTFS from image ...
 Syncing ...
-```
+--------------------------
 
 Again after restoreonly command is launched, ReaR prompts for restore
  destination. +
@@ -662,25 +662,25 @@ The _BLOCKCLONE_TRY_UNMOUNT_ is important here: it will attempt to unmount the
  run the risk that the data may be inconsistent.
  
 Global options
-```
+--------------------------
 # cat site.conf
 OUTPUT=ISO
 KEEP_OLD_OUTPUT_COPY=1
 BACKUP_URL="nfs://<hostname>/Stations_bkup/rear/"
-```
+--------------------------
 
 Options used for the base OS backup:
-```
+--------------------------
 # cat base_system.conf
 this_file_name=$( basename ${BASH_SOURCE[0]} )
 LOGFILE="$LOG_DIR/rear-$HOSTNAME-$WORKFLOW-${this_file_name%.*}.log"
 BACKUP_PROG_EXCLUDE+=( '/products/*' )
 BACKUP_PROG_ARCHIVE="backup-${this_file_name%.*}"
 BACKUP=NETFS
-```
+--------------------------
 
 Options used to take the encrypted filesystem image:
-```
+--------------------------
 this_file_name=$( basename ${BASH_SOURCE[0]} )
 LOGFILE="$LOG_DIR/rear-$HOSTNAME-$WORKFLOW-${this_file_name%.*}.log"
 BACKUP=BLOCKCLONE
@@ -694,18 +694,18 @@ BLOCKCLONE_SOURCE_DEV="/dev/vg00/lvol4"
 
 BLOCKCLONE_ALLOW_MOUNTED="yes"
 BLOCKCLONE_TRY_UNMOUNT="yes"
-```
+--------------------------
 
 ==== Running backup
 Base OS backup:
-```
+--------------------------
 # rear -C base_system mkbackup
-```
+--------------------------
 
 Create image of encrypted filesystem:
-```
+--------------------------
 # rear -C products_backup mkbackuponly
-```
+--------------------------
 
 ==== Running restore from ReaR restore/recovery system
 First recover the base OS. This will create all the partitions needed, including
@@ -713,7 +713,7 @@ First recover the base OS. This will create all the partitions needed, including
 As illustrated below, you will be prompted to chose a new encryption passphrase. 
  Please provide one, but you need not care about its value as it will get overwritten 
  during the next phase:
-```
+--------------------------
 RESCUE pc-pan:~ # rear -C base_system.conf recover
 [...]
 Please enter the password for LUKS device cr_vg00-lvol4 (/dev/mapper/vg00-lvol4):
@@ -724,7 +724,7 @@ Creating filesystem of type xfs with mount point /products on /dev/mapper/cr_vg0
 Mounting filesystem /products
 Disk layout created.
 [...]
-```
+--------------------------
 
 Now we can proceed and restore the encrypted filesystem image. The target filesystem
  will have been mounted by ReaR during the previous phase, but this will be 
@@ -732,12 +732,12 @@ Now we can proceed and restore the encrypted filesystem image. The target filesy
  to "yes". +
 As illustrated below, you will be prompted for the target block device to use.
  Confirm by pressing Enter or type in another value:
-```
+--------------------------
 RESCUE pc-pan:~ # rear -C products_backup.conf restoreonly
 [...]
 Restore backup-products_backup.dd.img to device: [/dev/vg00/lvol4]
 [...]
-```
+--------------------------
 
 Please note that the target device will not be re-mounted by the script at the end
  of the restore phase. If needed, this should be done manually. +
diff --git a/doc/user-guide/16-Rubrik-CDM.adoc b/doc/user-guide/16-Rubrik-CDM.adoc
index 41f37d20..3ac23b7b 100644
--- a/doc/user-guide/16-Rubrik-CDM.adoc
+++ b/doc/user-guide/16-Rubrik-CDM.adoc
@@ -84,7 +84,7 @@ To make CentOS v8.0 work the following line was needed:
 == Test Matrix
 
 .Test Matrix
-[%header,format=csv]
+[options="header",format="csv"]
 |===
 Operating System,DHCP,Static IP,Virtual,Physical,LVM Root Disk,Plain Root Disk,EXT3,EXT4,XFS,BTRFS,Original Cluster,Replication Cluster
 CentOS 7.3,,pass,Pass,,Pass,,,,Pass,,Pass,
